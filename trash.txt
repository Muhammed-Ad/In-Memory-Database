//vector<string> attrName;
  //or something like vector<unordered_map<datatype_t, unordered_map<string, string>> > row
  //unordered_map<string, unordered_map<string, datatype_t> > row;



  /*void erase(string attr){
    row.erase(attr);
  }
  void printRow(){
    for(auto p : row){
      cout << p.second.second << ", ";
    }
  }
  
  //Returns the value of the given attribute for this row
  const void* getValue(const string& attName) const{//need to fix to return correct pointers
    for(auto p : row){
      if(p.first == attName){
        if(p.second.first == BOOL){
          bool* val;
          if(p.second.second == "FALSE"){
            *val = false;
            return val;
          }else{
            *val = true;
            return val;
          }

          //return p.second.second == "TRUE" ? *val = true : *val = false;
        }
        else if (p.second.first == INT){
          int32_t* val;
          *val = stoi(p.second.second);
          return val;
        }
        else if (p.second.first == STRING){
          string* val = &p.second.second;
          return val;
        }
        else{
          return nullptr;
        }
      }
    }
    return nullptr;
  }*/


  //Row(unordered_map<string, pair<datatype_t, string> > row){ this->row = row; }

  //unordered_map<string, pair<datatype_t, string> > row;

  /* for(auto it = attr.begin(); it != attr.end(); it++){
    cout << boolalpha << p.getValue(it->first) << ", ";
  }*/


  /*void printRow(){
    for(auto p : row){
      cout << get<2>(p) << ", ";
    }
  }*/


  
  //remove all attributes 
  /*for(auto p : att){
    for(auto q = cur->attr.begin(); q != attr.end(); ){
      if(q->first == p){
        q = cur->attr.erase(q);
      }
      else
        q++;
    }
  }
  
  for(auto p : attr){
    for(auto s = cur->tableObjects.begin(); s != cur->tableObjects.end(); ){
      s->erase(p.first);
    }
  }*/



  //generic data entries in table
    /*while(!csvFile.eof()){
        i = 0;
        getline(csvFile, line);
        table->parse(line, dataRow);
        
        for(auto p : attrType){
            if(p == "BOOL"){
                tuple.insert({attrName[i], {BOOL, dataRow[i]}});
            }
            else if(p == "INT"){
                tuple.insert({attrName[i], {INT, dataRow[i]}});
            }
            else if(p == "STRING"){
                tuple.insert({attrName[i], {STRING, dataRow[i]}});
            }
            else{
                tuple.insert({attrName[i], {UNKNOWN, dataRow[i]}});
            }
            i++;
        }
        table->tableObjects.push_back(Row(tuple));//do I need to create a new row object each time since I am inserting into vector? ask hendrix
    
        tuple.clear();
    }*/





    